# DevOps Mini-Projet 2
Travail de recherche , mettre en place de l'integration continue avec les GitHub Actions

## Informations
- N° de groupe : 39
- Membres du groupe : Martin Quisquater, Muhammad Haziq, Vasil pop 


## Énoncé

### Pré-requis :
- Sur base de votre mini-projet 1 (TDD)
- Usage de [JEST](https://jestjs.io/docs/getting-started) obligatoire
- Utilisation pulls requests


### Ajouter ce fichier MD à votre mini-projet-1
Compléter les informations concernant votre numéro de groupe et membres du groupe

### Mettre en place une intégration continue
L'intégration continue doit se composer des étapes obligatoires suivantes (non-exhaustif):

    - Les dépendances doivent être installées
    - Une première étape indiquant l'heure de commencement de la pipeline doit être affichée
    - Le code doit être "formatté" correctement (Prettier)
    - Le code doit être "linté" correctement (Lint)
    - Le code doit être "testé" correctement ET le coverage doit être au-dessus de 80% (Jest)
    - Le code doit être "buildé" correctement
    - Une étape indiquant l'heure de fin de la pipeline doit être affichée
    - Une étape indiquant le string suivant "PIPELINE SUCCESS WITHOUT ERRORS" doit être affichée

### Enclencher l'intégration continue lors d'une Pull Request / Merge Request
Ouvrez une Pull Request / Merge Request 
Lors de l'ouverture et/ou de la modification de votre PR/MR vers la branche principale, l'intégration continue doit s'enclencher et les étapes doivent être respectées.
Merci de laisser une PR / MR ouverte afin que l'on puisse évaluer.


Liens utiles:
[GitHub Actions](https://docs.github.com/fr/actions)
[Jest coverage](https://www.valentinog.com/blog/jest-coverage/)

## Questions

- Décrivez brièvement ce que fait votre fichier YML.  
```bash
Le fichier YML configure un workflow pour un github, il s'execute à chaque pull requests
```
- En particulier : à quoi sert le “on” ? dans votre fichier YML ?  Quelle est la différence entre “on push” et “on pull request”. Que conseilleriez-vous comme option parmi ces 2 options à un groupe de développeurs junior ? Pourquoi ? 
```bash
on: pull_request" déclenche le flux de travail à chaque pull request.
La différence entre "on: pull_request" et "on: push" est que le premier est déclenché spécifiquement lorsqu'une pull request est ouverte ou modifiée, tandis que le second est déclenché à chaque push, indépendamment des pull requests.
Pour un groupe de développeurs juniors, il est généralement conseillé d'utiliser "on: pull_request" car cela permet de tester les modifications avant de les fusionner dans la branche principale.

```
- Quelle est la différence entre run et run_on ?  Expliquez par rapport à votre pipeline.  
```bash
Run est utilisé pour executer des commandes dans les etapes de pipeline
```
- Quelle est la différence entre “use” et “run”. Expliquez par rapport à votre pipeline. 
```bash
"uses" est utilisé pour spécifier une action à exécuter dans une étape particulière du pipeline, tandis que "run" est utilisé pour exécuter des commandes shell dans une étape.
```
- Peut-on intervertir différentes étapes dans votre pipeline ? Que votre réponse soit oui ou non, expliquez par rapport à votre pipeline. 
```bash
Oui, les étapes peuvent généralement être interverties dans un pipeline, mais cela dépend des dépendances entre les étapes. Par exemple, il serait logique de ne pas exécuter les tests avant l'installation des dépendances. Dans le fichier YML fourni, les étapes semblent être dans un ordre logique.
```
- Je veux ajouter un test de sécurité sur mon pipeline en exécutant le programme secure_app. Que devrais-je faire ?  Quelles questions devriez-vous vous poser ? 
```bash
Pour ajouter un test de sécurité avec secure_app, Il faut créer une nouvelle étape dans votre pipeline. 
Les question a se poser sont  : Comment installer secure_app? Quels sont les prérequis? 
Où se trouvent les résultats des tests de sécurité? et ajuster le fichier YML en conséquence, en ajoutant une nouvelle étape après les tests Jest, par exemple.
```
